// <auto-generated />
using System;
using MMA.WebApi.DataAccess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MMA.WebApi.DataAccess.Migrations
{
    [DbContext(typeof(MMADbContext))]
    [Migration("20231005083741_m7")]
    partial class m7
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.AcceptedDomain", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AcceptedDomain");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.AdnocTermsAndConditions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AdnocTermsAndConditions");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.AllowedEmailsForRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("InviteSent")
                        .HasColumnType("bit");

                    b.Property<string>("InviteSentBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InviteSentOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AllowedEmailsForRegistration");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AllBuyers")
                        .HasColumnType("bit");

                    b.Property<bool>("AllSuppliers")
                        .HasColumnType("bit");

                    b.Property<int>("CountAllToSend")
                        .HasColumnType("int");

                    b.Property<int>("CountFailed")
                        .HasColumnType("int");

                    b.Property<int>("CountSent")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SpecificBuyers")
                        .HasColumnType("bit");

                    b.Property<bool>("SpecificSuppliers")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Announcement");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.AnnouncementAttachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnnouncementId")
                        .HasColumnType("int");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("DocumentId");

                    b.ToTable("AnnouncementAttachments");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.AnnouncementSpecificBuyer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnnouncementId")
                        .HasColumnType("int");

                    b.Property<int>("BuyerType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.ToTable("AnnouncementSpecificBuyers");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.AnnouncementSpecificSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnnouncementId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierCategory")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.ToTable("AnnouncementSpecificSuppliers");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ECardSequence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastDataSynchronizationOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PlatformType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReceiveAnnouncement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserType");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.ApplicationUserDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OriginalImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("X1")
                        .HasColumnType("float");

                    b.Property<double>("X2")
                        .HasColumnType("float");

                    b.Property<double>("Y1")
                        .HasColumnType("float");

                    b.Property<double>("Y2")
                        .HasColumnType("float");

                    b.Property<double>("cropX1")
                        .HasColumnType("float");

                    b.Property<double>("cropX2")
                        .HasColumnType("float");

                    b.Property<double>("cropY1")
                        .HasColumnType("float");

                    b.Property<double>("cropY2")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DocumentId");

                    b.ToTable("ApplicationUserDocument");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.CategoryDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OriginalImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("X1")
                        .HasColumnType("float");

                    b.Property<double>("X2")
                        .HasColumnType("float");

                    b.Property<double>("Y1")
                        .HasColumnType("float");

                    b.Property<double>("Y2")
                        .HasColumnType("float");

                    b.Property<double>("cropX1")
                        .HasColumnType("float");

                    b.Property<double>("cropX2")
                        .HasColumnType("float");

                    b.Property<double>("cropY1")
                        .HasColumnType("float");

                    b.Property<double>("cropY2")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DocumentId");

                    b.ToTable("CategoryDocument");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HomeVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Collection");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.CollectionDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OriginalImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("X1")
                        .HasColumnType("float");

                    b.Property<double>("X2")
                        .HasColumnType("float");

                    b.Property<double>("Y1")
                        .HasColumnType("float");

                    b.Property<double>("Y2")
                        .HasColumnType("float");

                    b.Property<double>("cropX1")
                        .HasColumnType("float");

                    b.Property<double>("cropX2")
                        .HasColumnType("float");

                    b.Property<double>("cropY1")
                        .HasColumnType("float");

                    b.Property<double>("cropY2")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.HasIndex("DocumentId");

                    b.ToTable("CollectionDocument");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApproveStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EstablishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxCountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxE164Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDforADCCI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Land")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LandCountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LandE164Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LandNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LegalForm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LogoId")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileCountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileE164Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("POBox")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TradeLicenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TradeLicenseExpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LogoId");

                    b.HasIndex("TradeLicenceId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.CompanyActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyActivity");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.CompanyCategory", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("CompanyId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CompanyCategory");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.CompanyDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("CompanyDocument");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.CompanyLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Vicinity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyLocation");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.CompanyPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyPartner");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.CompanySuppliers", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CompanyId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("CompanySuppliers");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.DefaultArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleArabic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DefaultArea");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.DefaultLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vicinity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DefaultLocation");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.DiscountInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DiscountOrPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DiscountInfo");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("StoragePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Sms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplate");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.EmailTemplateRoot", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MailApplicationLogin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailBodyFooter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplateRoot");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.ExpiredToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExpiredTokens");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.LogBannerClick", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LogBannerClicks");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.LogKeywordSearch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogKeywordSearch");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.LogOfferClick", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ClickCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LogOfferClick");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.LogOfferSearch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LogOfferSearch");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.MailStorage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AnnouncementId")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("StatusNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StatusOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("OfferId");

                    b.HasIndex("UserId");

                    b.ToTable("MailStorage");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.MailStorageDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MailStorageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("MailStorageId");

                    b.ToTable("MailStorageDocument");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.MazayaCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("facilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("sort_order")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("MazayaCategories");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Mazayacategorydetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MazayasubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("relation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MazayasubCategoryId");

                    b.ToTable("Mazayacategorydetails");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.MazayacategoryDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OriginalImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("X1")
                        .HasColumnType("float");

                    b.Property<double>("X2")
                        .HasColumnType("float");

                    b.Property<double>("Y1")
                        .HasColumnType("float");

                    b.Property<double>("Y2")
                        .HasColumnType("float");

                    b.Property<double>("cropX1")
                        .HasColumnType("float");

                    b.Property<double>("cropX2")
                        .HasColumnType("float");

                    b.Property<double>("cropY1")
                        .HasColumnType("float");

                    b.Property<double>("cropY2")
                        .HasColumnType("float");

                    b.Property<int>("mazayaCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("mazayaCategoryId");

                    b.ToTable("mazayacategoryDocument");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.MazayaEcarddetails", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MazayaEcardmainid")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("card_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profile_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("relation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("MazayaEcardmainid");

                    b.ToTable("MazayaEcarddetails");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.MazayaEcardmain", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("additionalcount")
                        .HasColumnType("int");

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(28,12)");

                    b.Property<string>("currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date_expire")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("grandtotal")
                        .HasColumnType("decimal(28,12)");

                    b.Property<string>("invoice_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("subcategoryids")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("MazayaEcardmains");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.MazayaPackageSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(28,12)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("MazayaPackageSubscriptions");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.MazayaSubcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(28,12)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MazayaCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoofAdult")
                        .HasColumnType("int");

                    b.Property<int>("NoofChildren")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("optiontype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("sort_order")
                        .HasColumnType("int");

                    b.Property<int>("totalcount")
                        .HasColumnType("int");

                    b.Property<decimal>("vat")
                        .HasColumnType("decimal(28,12)");

                    b.HasKey("Id");

                    b.HasIndex("MazayaCategoryId");

                    b.ToTable("MazayaSubcategories");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PictureDataId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PictureDataId");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.MembershipECard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ECardSequence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMembershipCard")
                        .HasColumnType("bit");

                    b.Property<string>("MemberEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MembershipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MembershipType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isMember")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("sys_updated_on")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.HasIndex("OwnerId");

                    b.ToTable("MembershipECards");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.MembershipPictureData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentIdHorizontalBackPicture")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentIdHorizontalPicture")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentIdVerticalBackPicture")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentIdVerticalPicture")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MembershipType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MembershipPictureDatas");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.MobileCacheData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MobileCacheDatas");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NotificationType");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AboutCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("AnnouncementActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("BannerActive")
                        .HasColumnType("bit");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DecisionBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DecisionOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(28,12)");

                    b.Property<decimal?>("DiscountFrom")
                        .HasColumnType("decimal(28,12)");

                    b.Property<decimal?>("DiscountTo")
                        .HasColumnType("decimal(28,12)");

                    b.Property<decimal?>("DiscountedPrice")
                        .HasColumnType("decimal(28,12)");

                    b.Property<string>("E164Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FlagIsLatest")
                        .HasColumnType("bit");

                    b.Property<bool>("FlagIsWeekendOffer")
                        .HasColumnType("bit");

                    b.Property<string>("InternationalNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<int>("MembershipType")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OriginalPrice")
                        .HasColumnType("decimal(28,12)");

                    b.Property<string>("PriceCustom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PriceFrom")
                        .HasColumnType("decimal(28,12)");

                    b.Property<string>("PriceList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PriceTo")
                        .HasColumnType("decimal(28,12)");

                    b.Property<string>("PromotionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportCount")
                        .HasColumnType("int");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReviewedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SpecialAnnouncement")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsAndCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("WhatYouGet")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Offer");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.OfferCategory", b =>
                {
                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("OfferId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("OfferCategory");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.OfferCollection", b =>
                {
                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.HasKey("OfferId", "CollectionId");

                    b.HasIndex("CollectionId");

                    b.ToTable("OfferCollection");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.OfferDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Cover")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<Guid>("OriginalImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("X1")
                        .HasColumnType("float");

                    b.Property<double>("X2")
                        .HasColumnType("float");

                    b.Property<double>("Y1")
                        .HasColumnType("float");

                    b.Property<double>("Y2")
                        .HasColumnType("float");

                    b.Property<double>("cropX1")
                        .HasColumnType("float");

                    b.Property<double>("cropX2")
                        .HasColumnType("float");

                    b.Property<double>("cropY1")
                        .HasColumnType("float");

                    b.Property<double>("cropY2")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("OfferId");

                    b.ToTable("OfferDocument");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.OfferLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DefaultAreaId")
                        .HasColumnType("int");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<string>("Vicinity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultAreaId");

                    b.HasIndex("OfferId");

                    b.ToTable("OfferLocation");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.OfferRating", b =>
                {
                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(28,12)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("OfferId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("OfferRating");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.OfferReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("ReportType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResolvedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isResolved")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.ToTable("OfferReport");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.OffersMemberships", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MembershipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.HasIndex("OfferId");

                    b.ToTable("OffersMemberships");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.OfferSuggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OfferSuggestions");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.OfferTag", b =>
                {
                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("OfferId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("OfferTag");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RedeemOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RedeemOffers");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Refreshtoken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Revoked")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Roadshow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Activities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("E164Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmiratesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FocalPointEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FocalPointName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FocalPointSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionBox")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternationalNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmiratesId");

                    b.ToTable("Roadshow");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoadshowId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoadshowId");

                    b.ToTable("RoadshowComment");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DefaultLocationId")
                        .HasColumnType("int");

                    b.Property<int>("RoadshowInviteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DefaultLocationId");

                    b.HasIndex("RoadshowInviteId");

                    b.ToTable("RoadshowEvent");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowEventOffer", b =>
                {
                    b.Property<int>("RoadshowOfferId")
                        .HasColumnType("int");

                    b.Property<int>("RoadshowEventId")
                        .HasColumnType("int");

                    b.HasKey("RoadshowOfferId", "RoadshowEventId");

                    b.HasIndex("RoadshowEventId");

                    b.ToTable("RoadshowEventOffer");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoadshowId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RoadshowId");

                    b.ToTable("RoadshowInvite");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DefaultLocationId")
                        .HasColumnType("int");

                    b.Property<int>("RoadshowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DefaultLocationId");

                    b.HasIndex("RoadshowId");

                    b.ToTable("RoadshowLocation");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentItem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromotionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoadshowDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoadshowProposalId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoadshowProposalId");

                    b.ToTable("RoadshowOffer");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowOfferCategory", b =>
                {
                    b.Property<int>("RoadshowOfferId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("RoadshowOfferId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("RoadshowOfferCategory");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowOfferCollection", b =>
                {
                    b.Property<int>("RoadshowOfferId")
                        .HasColumnType("int");

                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.HasKey("RoadshowOfferId", "CollectionId");

                    b.HasIndex("CollectionId");

                    b.ToTable("RoadshowOfferCollection");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowOfferDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Cover")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OriginalImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoadshowOfferId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("X1")
                        .HasColumnType("float");

                    b.Property<double>("X2")
                        .HasColumnType("float");

                    b.Property<double>("Y1")
                        .HasColumnType("float");

                    b.Property<double>("Y2")
                        .HasColumnType("float");

                    b.Property<double>("cropX1")
                        .HasColumnType("float");

                    b.Property<double>("cropX2")
                        .HasColumnType("float");

                    b.Property<double>("cropY1")
                        .HasColumnType("float");

                    b.Property<double>("cropY2")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("RoadshowOfferId");

                    b.ToTable("RoadshowOfferDocument");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowOfferRating", b =>
                {
                    b.Property<int>("RoadshowOfferId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(28,12)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("RoadshowOfferId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("RoadshowOfferRating");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowOfferTag", b =>
                {
                    b.Property<int>("RoadshowOfferId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("RoadshowOfferId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("RoadshowOfferTag");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowProposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EquipmentItem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Manager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OfferEffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoadshowDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsAndCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TermsAndConditionChecked")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("RoadshowProposal");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowVoucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("RoadshowId")
                        .HasColumnType("int");

                    b.Property<int?>("RoadshowOfferId")
                        .HasColumnType("int");

                    b.Property<int?>("RoadshowProposalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Validity")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoadshowId");

                    b.HasIndex("RoadshowOfferId");

                    b.HasIndex("RoadshowProposalId");

                    b.ToTable("RoadshowVoucher");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.ServiceNowData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JsonData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Processed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ServiceNowDatas");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ForAllUsers")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCreateMail")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsQuickSurvey")
                        .HasColumnType("bit");

                    b.Property<int>("Opportunity")
                        .HasColumnType("int");

                    b.Property<string>("Questions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserRoles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.SurveyForUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SurveyForUsers");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tag");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEditable = true,
                            IsPrivate = false,
                            Title = "Special Offer",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEditable = true,
                            IsPrivate = false,
                            Title = "Best Price",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEditable = true,
                            IsPrivate = false,
                            Title = "Exclusive Offer",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEditable = true,
                            IsPrivate = false,
                            Title = "Top Seller",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEditable = true,
                            IsPrivate = false,
                            Title = "Featured",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEditable = true,
                            IsPrivate = false,
                            Title = "Trending",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEditable = false,
                            IsPrivate = false,
                            Title = "Ending Soon",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEditable = false,
                            IsPrivate = false,
                            Title = "Upcoming",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEditable = false,
                            IsPrivate = false,
                            Title = "Latest",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEditable = true,
                            IsPrivate = false,
                            Title = "Best Rates",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEditable = true,
                            IsPrivate = false,
                            Title = "Any Other Tag",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.UserDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DomainName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domains")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SequencerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserDomain");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DomainName = "ADNOCEmployee",
                            Domains = "@adnoc;",
                            KeyValue = "1971",
                            SequencerName = "dbo.ADNOCEmployeeSequencer"
                        },
                        new
                        {
                            Id = 2,
                            DomainName = "ADNOCEmployeeFamilyMember",
                            Domains = "",
                            KeyValue = "1971",
                            SequencerName = "dbo.ADNOCEmployeeSequencer"
                        },
                        new
                        {
                            Id = 3,
                            DomainName = "ADPolice",
                            Domains = "",
                            KeyValue = "1957",
                            SequencerName = "dbo.ADPoliceSequencer"
                        },
                        new
                        {
                            Id = 4,
                            DomainName = "RedCrescent",
                            Domains = "",
                            KeyValue = "1983",
                            SequencerName = "dbo.RedCrescentSequencer"
                        },
                        new
                        {
                            Id = 5,
                            DomainName = "AlumniRetirementMembers",
                            Domains = "",
                            KeyValue = "2018",
                            SequencerName = "dbo.AlumniRetirementMembersSequencer"
                        },
                        new
                        {
                            Id = 6,
                            DomainName = "ADSchools",
                            Domains = "",
                            KeyValue = "1971",
                            SequencerName = "dbo.DefaultSequencer"
                        },
                        new
                        {
                            Id = 7,
                            DomainName = "Other",
                            Domains = "",
                            KeyValue = "1971",
                            SequencerName = "dbo.DefaultSequencer"
                        });
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.UserFavouritesOffer", b =>
                {
                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("OfferId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UserFavouritesOffers");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.UserFavouritesRoadshowOffer", b =>
                {
                    b.Property<int>("RoadshowOfferId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("RoadshowOfferId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UserFavouritesRoadshowOffer");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.UserFcmToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FcmMessageToken")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "FcmMessageToken");

                    b.ToTable("UserFcmTokens");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.UserInvitations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvitedUserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserType");

                    b.ToTable("UserInvitations");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Acknowledged")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AcknowledgedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotification");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Views.OfferImages", b =>
                {
                    b.Property<bool>("Cover")
                        .HasColumnType("bit");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.ToView("OfferImages");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.RoadshowDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Cover")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OriginalImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoadshowId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("X1")
                        .HasColumnType("float");

                    b.Property<double>("X2")
                        .HasColumnType("float");

                    b.Property<double>("Y1")
                        .HasColumnType("float");

                    b.Property<double>("Y2")
                        .HasColumnType("float");

                    b.Property<double>("cropX1")
                        .HasColumnType("float");

                    b.Property<double>("cropX2")
                        .HasColumnType("float");

                    b.Property<double>("cropY1")
                        .HasColumnType("float");

                    b.Property<double>("cropY2")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("RoadshowId");

                    b.ToTable("RoadshowDocument");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.RoadshowOfferProposalDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoadshowOfferProposalId")
                        .HasColumnType("int");

                    b.Property<int?>("RoadshowProposalId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("RoadshowProposalId");

                    b.ToTable("RoadshowOfferProposalDocument");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.AnnouncementAttachments", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Announcement", "Announcement")
                        .WithMany("Attachments")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.AnnouncementSpecificBuyer", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Announcement", "Announcement")
                        .WithMany("SpecificBuyersCollection")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.AnnouncementSpecificSupplier", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Announcement", "Announcement")
                        .WithMany("SpecificSuppliersCollection")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.ApplicationUser", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.UserDomain", "UserDomain")
                        .WithMany()
                        .HasForeignKey("UserType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDomain");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.ApplicationUserDocument", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.ApplicationUser", null)
                        .WithMany("ApplicationUserDocuments")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MMA.WebApi.DataAccess.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.CategoryDocument", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Category", null)
                        .WithMany("CategoryDocuments")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.CollectionDocument", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Collection", null)
                        .WithMany("CollectionDocuments")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Comment", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Offer", null)
                        .WithMany("Comments")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Company", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.CompanyDocument", "Logo")
                        .WithMany()
                        .HasForeignKey("LogoId");

                    b.HasOne("MMA.WebApi.DataAccess.Models.Document", "TradeLicence")
                        .WithMany()
                        .HasForeignKey("TradeLicenceId");

                    b.Navigation("Logo");

                    b.Navigation("TradeLicence");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.CompanyActivity", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Company", null)
                        .WithMany("CompanyActivities")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.CompanyCategory", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.Company", "Company")
                        .WithMany("CompanyCategories")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.CompanyDocument", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.CompanyLocation", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Company", "Company")
                        .WithMany("CompanyLocations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.CompanyPartner", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Company", null)
                        .WithMany("CompanyPartners")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.CompanySuppliers", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Company", "Company")
                        .WithMany("CompanySuppliers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.ApplicationUser", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Document", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Document", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.MailStorage", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Announcement", "Announcement")
                        .WithMany()
                        .HasForeignKey("AnnouncementId");

                    b.HasOne("MMA.WebApi.DataAccess.Models.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId");

                    b.HasOne("MMA.WebApi.DataAccess.Models.ApplicationUser", "AspNetUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Announcement");

                    b.Navigation("AspNetUser");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.MailStorageDocument", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.MailStorage", null)
                        .WithMany("MailStorageDocuments")
                        .HasForeignKey("MailStorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Mazayacategorydetails", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.MazayaSubcategory", "MazayasubCategory")
                        .WithMany()
                        .HasForeignKey("MazayasubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MazayasubCategory");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.MazayacategoryDocument", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.MazayaCategory", null)
                        .WithMany("mazayaCategoryDocuments")
                        .HasForeignKey("mazayaCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.MazayaEcarddetails", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.MazayaEcardmain", "MazayaEcardmain")
                        .WithMany()
                        .HasForeignKey("MazayaEcardmainid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MazayaEcardmain");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.MazayaPackageSubscription", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MMA.WebApi.DataAccess.Models.MazayaSubcategory", "MazayaSubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MazayaSubCategory");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.MazayaSubcategory", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.MazayaCategory", "MazayaCategory")
                        .WithMany()
                        .HasForeignKey("MazayaCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MazayaCategory");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Membership", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.MembershipPictureData", "PictureData")
                        .WithMany()
                        .HasForeignKey("PictureDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PictureData");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.MembershipECard", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipId");

                    b.HasOne("MMA.WebApi.DataAccess.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Membership");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Offer", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Company", "Company")
                        .WithMany("Offers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.OfferCategory", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Category", "Category")
                        .WithMany("OfferCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.Offer", "Offer")
                        .WithMany("OfferCategories")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.OfferCollection", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Collection", "Collection")
                        .WithMany("OfferCollections")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.Offer", "Offer")
                        .WithMany("OfferCollections")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.OfferDocument", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Document", "Document")
                        .WithMany("OfferDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.Offer", null)
                        .WithMany("OfferDocuments")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.OfferLocation", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.DefaultArea", "DefaultArea")
                        .WithMany()
                        .HasForeignKey("DefaultAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.Offer", null)
                        .WithMany("OfferLocations")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultArea");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.OfferRating", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.Offer", "Offer")
                        .WithMany("OfferRating")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.OfferReport", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.OffersMemberships", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.Offer", "Offer")
                        .WithMany("Memberships")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Membership");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.OfferSuggestion", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.ApplicationUser", "Buyer")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.OfferTag", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Offer", "Offer")
                        .WithMany("OfferTags")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.Tag", "Tag")
                        .WithMany("OfferTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Roadshow", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("MMA.WebApi.DataAccess.Models.Document", "EmiratesIdDocument")
                        .WithMany()
                        .HasForeignKey("EmiratesId");

                    b.Navigation("Company");

                    b.Navigation("EmiratesIdDocument");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowComment", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Roadshow", null)
                        .WithMany("RoadshowComments")
                        .HasForeignKey("RoadshowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowEvent", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.DefaultLocation", "DefaultLocation")
                        .WithMany()
                        .HasForeignKey("DefaultLocationId");

                    b.HasOne("MMA.WebApi.DataAccess.Models.RoadshowInvite", "RoadshowInvite")
                        .WithMany("RoadshowEvents")
                        .HasForeignKey("RoadshowInviteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultLocation");

                    b.Navigation("RoadshowInvite");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowEventOffer", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.RoadshowEvent", "RoadshowEvent")
                        .WithMany("RoadshowEventOffers")
                        .HasForeignKey("RoadshowEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.RoadshowOffer", "RoadshowOffer")
                        .WithMany("RoadshowEventOffers")
                        .HasForeignKey("RoadshowOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoadshowEvent");

                    b.Navigation("RoadshowOffer");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowInvite", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.Roadshow", "Roadshow")
                        .WithMany("RoadshowInvites")
                        .HasForeignKey("RoadshowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Roadshow");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowLocation", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.DefaultLocation", "DefaultLocation")
                        .WithMany()
                        .HasForeignKey("DefaultLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.Roadshow", "Roadshow")
                        .WithMany("Locations")
                        .HasForeignKey("RoadshowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultLocation");

                    b.Navigation("Roadshow");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowOffer", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.RoadshowProposal", "RoadshowProposal")
                        .WithMany("RoadshowOffers")
                        .HasForeignKey("RoadshowProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoadshowProposal");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowOfferCategory", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.RoadshowOffer", "RoadshowOffer")
                        .WithMany("RoadshowOfferCategories")
                        .HasForeignKey("RoadshowOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("RoadshowOffer");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowOfferCollection", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Collection", "Collection")
                        .WithMany()
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.RoadshowOffer", "RoadshowOffer")
                        .WithMany("RoadshowOfferCollections")
                        .HasForeignKey("RoadshowOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("RoadshowOffer");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowOfferDocument", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.RoadshowOffer", null)
                        .WithMany("OfferDocuments")
                        .HasForeignKey("RoadshowOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowOfferRating", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.RoadshowOffer", "RoadshowOffer")
                        .WithMany("OfferRating")
                        .HasForeignKey("RoadshowOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("RoadshowOffer");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowOfferTag", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.RoadshowOffer", "RoadshowOffer")
                        .WithMany("RoadshowOfferTags")
                        .HasForeignKey("RoadshowOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoadshowOffer");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowProposal", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowVoucher", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Roadshow", null)
                        .WithMany("RoadshowVouchers")
                        .HasForeignKey("RoadshowId");

                    b.HasOne("MMA.WebApi.DataAccess.Models.RoadshowOffer", null)
                        .WithMany("RoadshowVouchers")
                        .HasForeignKey("RoadshowOfferId");

                    b.HasOne("MMA.WebApi.DataAccess.Models.RoadshowProposal", null)
                        .WithMany("RoadshowVouchers")
                        .HasForeignKey("RoadshowProposalId");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Survey", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.ApplicationUser", "AspNetUser")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.Navigation("AspNetUser");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.UserFavouritesOffer", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.Offer", "Offer")
                        .WithMany("UserFavouritesOffers")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.UserFavouritesRoadshowOffer", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.RoadshowOffer", "RoadshowOffer")
                        .WithMany("UserFavouritesRoadshowOffers")
                        .HasForeignKey("RoadshowOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("RoadshowOffer");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.UserFcmToken", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.UserInvitations", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("MMA.WebApi.DataAccess.Models.UserDomain", "UserDomain")
                        .WithMany()
                        .HasForeignKey("UserType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserDomain");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.UserNotification", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.ApplicationUser", "AspNetUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AspNetUser");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.RoadshowDocument", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.Roadshow", null)
                        .WithMany("Documents")
                        .HasForeignKey("RoadshowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.RoadshowOfferProposalDocument", b =>
                {
                    b.HasOne("MMA.WebApi.DataAccess.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMA.WebApi.DataAccess.Models.RoadshowProposal", null)
                        .WithMany("Documents")
                        .HasForeignKey("RoadshowProposalId");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Announcement", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("SpecificBuyersCollection");

                    b.Navigation("SpecificSuppliersCollection");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserDocuments");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Category", b =>
                {
                    b.Navigation("CategoryDocuments");

                    b.Navigation("OfferCategories");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Collection", b =>
                {
                    b.Navigation("CollectionDocuments");

                    b.Navigation("OfferCollections");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Company", b =>
                {
                    b.Navigation("CompanyActivities");

                    b.Navigation("CompanyCategories");

                    b.Navigation("CompanyLocations");

                    b.Navigation("CompanyPartners");

                    b.Navigation("CompanySuppliers");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Document", b =>
                {
                    b.Navigation("OfferDocuments");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.MailStorage", b =>
                {
                    b.Navigation("MailStorageDocuments");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.MazayaCategory", b =>
                {
                    b.Navigation("mazayaCategoryDocuments");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Offer", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Memberships");

                    b.Navigation("OfferCategories");

                    b.Navigation("OfferCollections");

                    b.Navigation("OfferDocuments");

                    b.Navigation("OfferLocations");

                    b.Navigation("OfferRating");

                    b.Navigation("OfferTags");

                    b.Navigation("UserFavouritesOffers");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Roadshow", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Locations");

                    b.Navigation("RoadshowComments");

                    b.Navigation("RoadshowInvites");

                    b.Navigation("RoadshowVouchers");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowEvent", b =>
                {
                    b.Navigation("RoadshowEventOffers");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowInvite", b =>
                {
                    b.Navigation("RoadshowEvents");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowOffer", b =>
                {
                    b.Navigation("OfferDocuments");

                    b.Navigation("OfferRating");

                    b.Navigation("RoadshowEventOffers");

                    b.Navigation("RoadshowOfferCategories");

                    b.Navigation("RoadshowOfferCollections");

                    b.Navigation("RoadshowOfferTags");

                    b.Navigation("RoadshowVouchers");

                    b.Navigation("UserFavouritesRoadshowOffers");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.RoadshowProposal", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("RoadshowOffers");

                    b.Navigation("RoadshowVouchers");
                });

            modelBuilder.Entity("MMA.WebApi.DataAccess.Models.Tag", b =>
                {
                    b.Navigation("OfferTags");
                });
#pragma warning restore 612, 618
        }
    }
}
